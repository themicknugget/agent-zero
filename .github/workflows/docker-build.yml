name: Docker Image CI/CD

on:
  push:
    branches: [main, development, testing]
    paths:
      - 'docker/run/**'
  pull_request:
    branches: [main, development, testing]
    paths:
      - 'docker/run/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'
        type: choice
        options:
          - development
          - testing
          - main
      push_to_dockerhub:
        description: 'Push to DockerHub also'
        required: false
        default: false
        type: boolean

jobs:
  # Job to prepare common variables and values
  prepare:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.set-vars.outputs.branch_name }}
      image_tag: ${{ steps.set-vars.outputs.image_tag }}
      owner: ${{ steps.set-vars.outputs.owner }}
      cache_key: ${{ steps.set-vars.outputs.cache_key }}
      
    steps:
      - name: Get branch name
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi

      - name: Set variables
        id: set-vars
        run: |
          # Set branch name as output
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Set image tag
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi
          
          # Get lowercase repository owner
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          
          # Set cache key
          echo "cache_key=$BRANCH_NAME-$(date +%Y%m)" >> $GITHUB_OUTPUT

  # Build for AMD64 architecture
  build-amd64:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      status: ${{ job.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Free up disk space
        run: |
          echo "Cleaning up disk space..."
          # Remove unused packages and cache
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/lib/node_modules
          
          # Clean Docker resources
          docker system prune -af --volumes
          
          # Display available space
          df -h

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          use: true

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
          docker buildx inspect

      # Use BuildJet cache for better performance
      - name: Set up Docker layer caching for AMD64
        uses: buildjet/cache@v3
        with:
          path: /tmp/.buildx-cache-amd64
          key: ${{ runner.os }}-buildx-amd64-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-amd64-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.event.inputs.push_to_dockerhub == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push AMD64 image
      - name: Build and push AMD64 image
        uses: docker/build-push-action@v4
        with:
          context: ./docker/run
          file: ./docker/run/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-amd64
          build-args: |
            BRANCH=${{ needs.prepare.outputs.branch_name }}
            REPO_URL=https://github.com/${{ github.repository }}
            CACHE_DATE=${{ github.run_id }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache-amd64
            type=registry,ref=ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-amd64
          cache-to: type=local,dest=/tmp/.buildx-cache-amd64-new,mode=max

      # Move cache for next runs
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache-amd64
          mv /tmp/.buildx-cache-amd64-new /tmp/.buildx-cache-amd64 || true
      
      # Upload cache to BuildJet
      - name: Upload Docker layer cache to BuildJet
        if: always()
        uses: buildjet/cache/save@v3
        with:
          path: /tmp/.buildx-cache-amd64
          key: ${{ runner.os }}-buildx-amd64-${{ github.sha }}

  # Build for ARM64 using native ARM64 runner
  build-arm64:
    needs: prepare
    runs-on: ubuntu-22.04-arm
    permissions:
      contents: read
      packages: write
    outputs:
      status: ${{ job.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Free up disk space
        run: |
          echo "Cleaning up disk space..."
          # Remove unused packages and cache
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/lib/node_modules
          
          # Clean Docker resources
          docker system prune -af --volumes
          
          # Display available space
          df -h

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          use: true

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
          docker buildx inspect

      # Use BuildJet cache for better performance
      - name: Set up Docker layer caching for ARM64
        uses: buildjet/cache@v3
        with:
          path: /tmp/.buildx-cache-arm64
          key: ${{ runner.os }}-buildx-arm64-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-arm64-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.event.inputs.push_to_dockerhub == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push ARM64 image
      - name: Build and push ARM64 image
        uses: docker/build-push-action@v4
        with:
          context: ./docker/run
          file: ./docker/run/Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-arm64
          build-args: |
            BRANCH=${{ needs.prepare.outputs.branch_name }}
            REPO_URL=https://github.com/${{ github.repository }}
            CACHE_DATE=${{ github.run_id }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache-arm64
            type=registry,ref=ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-arm64
          cache-to: type=local,dest=/tmp/.buildx-cache-arm64-new,mode=max

      # Move cache for next runs
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache-arm64
          mv /tmp/.buildx-cache-arm64-new /tmp/.buildx-cache-arm64 || true
          
      # Upload cache to BuildJet
      - name: Upload Docker layer cache to BuildJet
        if: always()
        uses: buildjet/cache/save@v3
        with:
          path: /tmp/.buildx-cache-arm64
          key: ${{ runner.os }}-buildx-arm64-${{ github.sha }}

  # Create multi-arch manifest and push to final tag
  manifest:
    needs: [prepare, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          use: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.event.inputs.push_to_dockerhub == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log-in to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create and push manifest
        run: |
          AMD64_IMAGE=""
          ARM64_IMAGE=""
          
          if [[ "${{ needs.build-amd64.outputs.status }}" == "success" ]] && docker manifest inspect ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-amd64 &>/dev/null; then
            AMD64_IMAGE="ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-amd64"
          fi
          
          if [[ "${{ needs.build-arm64.outputs.status }}" == "success" ]] && docker manifest inspect ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-arm64 &>/dev/null; then
            ARM64_IMAGE="ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }}-linux-arm64"
          fi
          
          IMAGES=""
          if [[ -n "$AMD64_IMAGE" ]]; then
            IMAGES="$AMD64_IMAGE"
          fi
          if [[ -n "$ARM64_IMAGE" ]]; then
            IMAGES="$IMAGES $ARM64_IMAGE" || IMAGES="$ARM64_IMAGE"
          fi
          
          if [[ -z "$IMAGES" ]]; then
            echo "No images are available for the manifest. Exiting."
            exit 1
          fi
          
          docker buildx imagetools create -t ghcr.io/${{ needs.prepare.outputs.owner }}/agent-zero-run:${{ needs.prepare.outputs.image_tag }} $IMAGES
          echo "Multi-arch manifest created and pushed successfully"

      - name: Create and push manifest to DockerHub
        if: (github.event.inputs.push_to_dockerhub == 'true' || github.event_name != 'workflow_dispatch') && (needs.build-amd64.outputs.status == 'success' || needs.build-arm64.outputs.status == 'success')
        run: |
          docker manifest create frdel/agent-zero-run:${{ needs.prepare.outputs.image_tag }}
          if [[ -n "$AMD64_IMAGE" ]]; then
            docker manifest create frdel/agent-zero-run:${{ needs.prepare.outputs.image_tag }} --amend $AMD64_IMAGE
            docker manifest annotate frdel/agent-zero-run:${{ needs.prepare.outputs.image_tag }} $AMD64_IMAGE --os linux --arch amd64
          fi
          if [[ -n "$ARM64_IMAGE" ]]; then
            docker manifest create frdel/agent-zero-run:${{ needs.prepare.outputs.image_tag }} --amend $ARM64_IMAGE
            docker manifest annotate frdel/agent-zero-run:${{ needs.prepare.outputs.image_tag }} $ARM64_IMAGE --os linux --arch arm64 --variant v8
          fi
          docker manifest push --purge frdel/agent-zero-run:${{ needs.prepare.outputs.image_tag }}
          echo "DockerHub manifest pushed successfully"